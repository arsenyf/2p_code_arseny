%{
# ROI (Region of interest - e.g. cells) % XYZ coordinate of a cell in microns after correction of ETL abberations based on ETL callibration
-> IMG.ROI
---
roi_centroid_x_um                 : double       # ROI centroid x, microns, within plane coordinates, corrected for ETL distortion
roi_centroid_y_um                 : double        # ROI centroid  y, microns, within plane coordinates, corrected for ETL distortion
roi_centroid_z_um                 : double        # ROI centroid  z, microns, relative to top plane

%}


classdef ROIPosition < dj.Imported
    properties
        keySource = (EXP2.Session & IMG.ROIPositionETL & IMG.FOVEpoch) - IMG.Mesoscope;
    end
    methods(Access=protected)
        function makeTuples(self, key)
            
            
            rel_roi_xy = IMG.ROIPositionETL & key;
            zoom =fetch1(IMG.FOVEpoch & key,'zoom', 'LIMIT 1');
            kkk.scanimage_zoom = zoom;
            pix2dist=  fetch1(IMG.Zoom2Microns & kkk,'fov_microns_size_x') / fetch1(IMG.FOV & key, 'fov_x_size');
            
            
            x_all=fetchn(rel_roi_xy &key,'roi_centroid_x_corrected','ORDER BY roi_number');
            y_all=fetchn(rel_roi_xy &key,'roi_centroid_y_corrected','ORDER BY roi_number');
            
            x_all=x_all*pix2dist;
            y_all=y_all*pix2dist;
            
            
            z_all=fetchn(rel_roi_xy*IMG.PlaneCoordinates & key,'z_pos_relative','ORDER BY roi_number');
            
            D=fetch (IMG.ROI & key, 'ORDER BY roi_number');
            
            numberROI = size(D,1);
            for iROI=1:1:numberROI
                D(iROI).roi_centroid_x_um = x_all(iROI);
                D(iROI).roi_centroid_y_um = y_all(iROI);
                D(iROI).roi_centroid_z_um = z_all(iROI);
            end
            insert(self,D);
        end
    end
end